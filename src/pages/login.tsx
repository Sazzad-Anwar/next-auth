import Loader from '@/components/Loader';
import { signIn, useSession } from 'next-auth/react';
import Head from 'next/head';
import Image from 'next/image';
import { useRouter } from 'next/router';
import React, { useEffect, useState } from 'react';
import { useForm, Resolver } from 'react-hook-form';

type LoginFormType = {
    identifier: string;
    password: string;
};

const resolver: Resolver<LoginFormType> = async (values) => {
    return {
        values: values.identifier && values.password ? values : {},
        errors: !values.identifier
            ? {
                  identifier: {
                      type: 'required',
                      message: 'This is required.',
                  },
              }
            : !values.password
            ? {
                  password: {
                      type: 'required',
                      message: 'This is required.',
                  },
              }
            : {},
    };
};

export default function Login() {
    const [showPassword, setShowPassword] = useState<boolean>(false);
    const router = useRouter();
    const session = useSession();

    const {
        register,
        handleSubmit,
        formState: { errors },
    } = useForm<LoginFormType>({ resolver });

    const onSubmit = handleSubmit(async (data) => {
        try {
            let loginData = await signIn('credentials', {
                identifier: data.identifier,
                password: data.password,
                redirect: false,
                callbackUrl: process.env.NEXTAUTH_URL,
            });
            if (loginData?.ok) {
                router.push('/');
            }
            if (loginData?.error) {
                router.push(`/error?error=${loginData.error}`);
            }
        } catch (error: any) {
            router.push(`/error?error=${error?.data?.message ?? error?.message}`);
        }
    });

    useEffect(() => {
        if (session?.status === 'authenticated') {
            router.push('/');
        }
    }, [router, session]);

    const googleLogin = async () => {
        try {
            await signIn('google', {
                callbackUrl: process.env.NEXTAUTH_URL,
            });
        } catch (error) {
            console.log(error);
        }
    };

    const facebookLogin = async () => {
        try {
            await signIn('facebook', { callbackUrl: process.env.NEXTAUTH_URL });
        } catch (error) {
            console.log(error);
        }
    };

    if (session?.status === 'unauthenticated') {
        return (
            <>
                <Head>
                    <title>Next Auth</title>
                    <meta name="description" content="Generated by create next app" />
                    <meta name="viewport" content="width=device-width, initial-scale=1" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>
                <div className="bg-gray-800 min-h-screen flex justify-center items-center text-white">
                    <div className="w-[320px] mx-auto">
                        <h1 className="text-center text-2xl font-bold">Next Auth Login</h1>
                        <form onSubmit={onSubmit} className="w-full my-3">
                            <div className="mb-5">
                                <input
                                    type="email"
                                    {...register('identifier', {})}
                                    className={
                                        (errors?.identifier?.message
                                            ? 'border-red-500'
                                            : 'border-blue-500') +
                                        ' rounded border-2 py-3 px-3 w-full outline-none text-gray-900'
                                    }
                                    placeholder="Email"
                                />
                                {errors?.identifier && (
                                    <p className="text-red-500 font-semibold mt-1">
                                        {errors.identifier.message}
                                    </p>
                                )}
                            </div>
                            <div className="mb-5 relative">
                                <input
                                    type={showPassword ? 'text' : 'password'}
                                    {...register('password')}
                                    className={
                                        (errors?.password?.message
                                            ? 'border-red-500'
                                            : 'border-blue-500') +
                                        ' rounded border-2 py-3 px-3 w-full outline-none text-gray-900'
                                    }
                                    placeholder="Password"
                                />
                                <button
                                    type="button"
                                    onClick={() => setShowPassword(!showPassword)}
                                    className="absolute right-4 top-1/2 -translate-y-1/2 text-xs font-semibold text-gray-900"
                                >
                                    {showPassword ? 'hide' : 'show'}
                                </button>
                                {errors?.password && (
                                    <p className="text-red-500 font-semibold mt-1">
                                        {errors.password.message}
                                    </p>
                                )}
                            </div>

                            <div className="mb-5">
                                <button className="rounded border w-full py-3 border-blue-500 bg-blue-800 text-white hover:bg-blue-900">
                                    Login
                                </button>
                            </div>
                        </form>
                        <div className="flex items-center">
                            <div className="w-full h-px bg-gray-200 rounded mt-px" />
                            <span className="text-white font-bold text-base px-2">or</span>
                            <div className="w-full h-px bg-gray-200 rounded mt-px" />
                        </div>

                        <button
                            onClick={() => googleLogin()}
                            className="mt-3 rounded border w-full py-3 border-blue-500 bg-blue-800 text-white hover:bg-blue-900 flex items-center justify-center"
                        >
                            <Image
                                src="/images/google.svg"
                                height={18}
                                width={18}
                                alt="google-icon"
                            />
                            <span className="ml-2">Login with google</span>
                        </button>

                        <button
                            onClick={() => facebookLogin()}
                            className="mt-3 rounded border w-full py-3 border-blue-500 bg-blue-800 text-white hover:bg-blue-900 flex items-center justify-center"
                        >
                            <Image
                                src="https://img.icons8.com/fluency/512/facebook-new.png"
                                height={24}
                                width={24}
                                alt="facebook-icon"
                            />
                            <span className="ml-2">Login with facebook</span>
                        </button>
                        <button
                            onClick={() => router.push('/')}
                            className="mt-3 text-center rounded border w-full py-3 border-blue-500 bg-blue-800 text-white hover:bg-blue-900"
                        >
                            Back
                        </button>

                        <div className="flex items-center my-3">
                            <div className="w-full h-px bg-gray-200 rounded mt-px" />
                            <span className="text-white font-bold text-base px-2">or</span>
                            <div className="w-full h-px bg-gray-200 rounded mt-px" />
                        </div>

                        <div className="mb-5">
                            <button
                                onClick={() => router.push('/signup')}
                                className="rounded border w-full py-3 border-blue-500 bg-blue-800 text-white hover:bg-blue-900"
                            >
                                Sign up
                            </button>
                        </div>
                    </div>
                </div>
            </>
        );
    }

    return <Loader />;
}
