import Head from 'next/head';
import Image from 'next/image';
import { signOut, useSession, getSession } from 'next-auth/react';
import Link from 'next/link';
import { GetServerSideProps } from 'next';
import Loader from '@/components/Loader';
import { useEffect, useRef, useState } from 'react';
import { IUser } from '@/interfaces/user';
import useSWR from 'swr';
import { Fetcher } from '@/utils/Fetcher';
import axios from 'axios';
import { IPost, IPostUser } from '@/interfaces/post';
import Router, { useRouter } from 'next/router';
import Post from '@/components/Post';
import { Config } from '@/config/config';
import AppLayout from '@/layout/AppLayout';
import api from '@/utils/AxiosInstance';
import Cookies from 'js-cookie';

export default function Home({ posts, users }: { posts: IPost[]; users: IPostUser[] }) {
    let session = useSession();
    let router = useRouter();
    const userListRef = useRef<HTMLDivElement>(null);
    let { data: userData } = useSWR(
        session?.status === 'authenticated' ? '/auth/user' : null,
        Fetcher,
    );
    let [startPage, setStartPage] = useState<number>(20);
    const [loading, setLoading] = useState(false);
    const startLoading = () => setLoading(true);
    const stopLoading = () => setLoading(false);
    const [postList, setPostList] = useState<IPost[]>(posts);

    let [user, setUser] = useState<IUser>();

    useEffect(() => {
        if (session) {
            setUser(userData && userData.response);
        }
        userListRef?.current?.scrollIntoView();
    }, [postList, posts, session, userData]);

    useEffect(() => {
        // Router event handler
        Router.events.on('routeChangeStart', startLoading);
        Router.events.on('routeChangeComplete', stopLoading);
        return () => {
            Router.events.off('routeChangeStart', startLoading);
            Router.events.off('routeChangeComplete', stopLoading);
        };
    }, []);

    const logout = async () => {
        await api.get('/auth/logout');
        Cookies.remove('token');
        signOut();
    };

    if (session.status === 'loading') {
        return <Loader />;
    }

    return (
        <div className="bg-gray-800 min-h-screen">
            <Head>
                <title>Next Auth</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <AppLayout>
                <header className="bg-gray-900 py-3 sticky top-0 z-10 text-white">
                    <div className="container mx-auto flex justify-between">
                        <div
                            onClick={() => router.push('/profile')}
                            className="flex items-center cursor-pointer"
                        >
                            <Image
                                className="rounded-full ring-2"
                                src={
                                    (session?.status === 'authenticated' && user?.avatar
                                        ? Config.bucketLink + '/' + user?.avatar
                                        : 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png') ??
                                    'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png'
                                }
                                height={44}
                                width={44}
                                priority
                                alt={user?.firstName ?? 'guest-user'}
                            />
                            <div className="ml-3 text-left">
                                <p className="text-lg font-bold mb-0">
                                    {user?.firstName || user?.lastName
                                        ? user?.firstName + ' ' + user?.lastName
                                        : 'Guest User'}
                                </p>
                                <p className="text-sm font-medium mt-0">
                                    {session.data?.user?.email ?? 'example@email.com'}
                                </p>
                            </div>
                        </div>
                        {session?.status === 'authenticated' ? (
                            <button
                                onClick={() => logout()}
                                className="rounded border w-auto mt-3 px-5 py-2 border-blue-500 bg-blue-800 text-white hover:bg-blue-900 flex items-center justify-center"
                            >
                                Logout
                            </button>
                        ) : (
                            <Link
                                href="/login"
                                className="rounded border w-auto mt-3 px-5 py-2 border-blue-500 bg-blue-800 text-white hover:bg-blue-900 flex items-center justify-center"
                            >
                                Login
                            </Link>
                        )}
                    </div>
                </header>
                <main className="bg-gray-800 min-h-screen text-white mt-10">
                    <section className="mx-auto container grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
                        {postList.map((post: IPost) => (
                            <Post key={post.title} post={post} users={users} />
                        ))}
                    </section>
                    <section
                        onClick={() => {
                            setStartPage((startPage) => startPage + 10);
                            const path = router.pathname;
                            const query = router.query;
                            query.startPage = startPage.toString();
                            router.push({
                                pathname: path,
                                query: router.query,
                            });
                            setPostList(posts);
                        }}
                        className="flex justify-center items-center"
                    >
                        <button className="rounded border w-auto my-3 px-5 py-2 border-blue-500 bg-blue-800 text-white hover:bg-blue-900 flex items-center justify-center">
                            See more
                        </button>
                        <div ref={userListRef} />
                    </section>
                </main>
            </AppLayout>
        </div>
    );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
    let { query, res } = context;
    const session = await getSession(context);
    let posts;
    let users;
    res.setHeader('Cache-Control', 'public, s-maxage=10, stale-while-revalidate=59');

    try {
        let { data } = await axios.get(
            `https://jsonplaceholder.typicode.com/posts?_start=${query.startPage ?? 0}&_limit=10`,
        );
        let { data: usersData } = await axios.get(`https://jsonplaceholder.typicode.com/users`);

        posts = data;
        users = usersData;
    } catch (error) {
        console.log(error);
    }

    return {
        props: {
            session,
            posts,
            users,
        },
    };
};
