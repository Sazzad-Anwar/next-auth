import Head from 'next/head';
import Image from 'next/image';
import { signOut, useSession, getSession } from 'next-auth/react';
import Link from 'next/link';
import { GetServerSideProps } from 'next';
import Loader from '@/components/Loader';
import { useEffect, useState } from 'react';
import api from '@/utils/AxiosInstance';
import { IUser } from '@/interfaces/user';
import useSWR from 'swr';
import { Fetcher } from '@/utils/Fetcher';

export default function Profile() {
    let session = useSession();
    let { data, isLoading } = useSWR('/auth/user', Fetcher);
    let [user, setUser] = useState<IUser>();

    useEffect(() => {
        if (session) {
            setUser(data && data.response);
        }
    }, [session, data]);

    if (session.status === 'loading') {
        return <Loader />;
    }

    if (!session) {
        return <Loader />;
    }

    return (
        <div className="bg-gray-800 min-h-screen">
            <Head>
                <title>Next Auth</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="bg-gray-800 min-h-screen flex justify-center items-center text-white">
                <div className="w-[320px] mx-auto overflow-auto">
                    <h1 className="text-white text-xl font-bold text-center mb-3">
                        Next auth user
                    </h1>
                    <div className="flex items-center border-2 border-blue-800 rounded">
                        <Image
                            className="rounded"
                            src={
                                session.data?.user?.image ??
                                'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png'
                            }
                            height={79}
                            width={79}
                            priority
                            alt={session.data?.user?.name ?? 'guest-user'}
                        />
                        <div className="ml-3 text-left">
                            <p className="text-lg font-bold mb-0">
                                {session.data?.user?.name ?? 'Guest User'}
                            </p>
                            <p className="text-sm font-medium mt-0">
                                {session.data?.user?.email ?? 'example@email.com'}
                            </p>
                            <span className="text-xs font-medium mt-0 px-2 rounded-full py-px bg-gray-900">
                                {user?.roleSlug ?? 'Guest'}
                            </span>
                        </div>
                    </div>
                    {session?.status === 'authenticated' ? (
                        <button
                            onClick={() => signOut()}
                            className="rounded border w-full mt-3 px-5 py-3 border-blue-500 bg-blue-800 text-white hover:bg-blue-900 flex items-center justify-center"
                        >
                            Logout
                        </button>
                    ) : (
                        <Link
                            href="/login"
                            className="rounded border mt-3 px-5 py-3 border-blue-500 bg-blue-800 text-white hover:bg-blue-900 flex items-center justify-center"
                        >
                            Login
                        </Link>
                    )}
                    <Link
                        href="/"
                        className="rounded border mt-3 px-5 py-3 border-blue-500 bg-blue-800 text-white hover:bg-blue-900 flex items-center justify-center"
                    >
                        Go home
                    </Link>
                </div>
            </main>
        </div>
    );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
    const session = await getSession(context);

    if (!session) {
        return {
            redirect: {
                destination: '/login',
                permanent: false,
            },
        };
    }

    return {
        props: {
            session,
        },
    };
};
